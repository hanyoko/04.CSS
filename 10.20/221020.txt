오전 9:46 2022-10-21z-index
ec) z-index: 2;  /* 쌓여있는 요소들의 위치를 변경하는 태그 */
- position 을 쓴 상태에서 사용하는 것이다
- position 속성을 쓴 태그가 가장 위에 있다
그 밑에 위치 시키기 위해서 사용하는 태그이다.

flex-box 유연한 박스
1. container 박스에 주는 속성
* display: flex;
- 이것을 입력하는 순간 display를 지정했던 것들이 container가 된다
- 블럭에서 플렉스로 변경

* flex-direction 
- 아이템의 배치 방향(주축)을 지정
- row 가로 / column 세로 / row-reverse 반대쪽을 기준으로 가로 시작 배열 / column-reverse 아래에서 위로
default 값은 row

* flex-wrap
- 아이템의 배치를 1줄 또는 여러줄 지정
wrap / no wrap / wrap-reverse
default 값은 no-wrap

flex를 사용하고 싶으면 감싸고 있는 태그에게 줘야한다.
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        #wrap {
            width: 1000px;
            height: 600px;
            background-color: bisque;
            margin: 0 auto;
            display: flex;
        }
        #wrap div {
            width: 100px;
            height: 100px;
            background-color: aqua;
            border: 3px solid #333;
        }
    </style>
</head>
<body>
    <div id="wrap">
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
    </div>
</body>

flex의 default 값이 row이기 때문에 다른 것을 따로 입력하지않아도 
자동으로 가로배치가 된다.


    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        #wrap {
            width: 1000px;
            height: 600px;
            background-color: bisque;
            margin: 0 auto;
            display: flex;
            flex-direction: row;
        }
        #wrap div {
            width: 300px;
            height: 100px;
            background-color: aqua;
            border: 3px solid #333;
        }
    </style>
</head>
<body>
    <div id="wrap">
        <div>1</div>
        <div>2</div>
        <div>3</div>
        <div>4</div>
        <div>5</div>
    </div>
</body>

flex를 이용하고 wrap의 width를 1000px로 지정하고
wrap에 들어있는 div의 크기를 1000px 이상으로 지정되어도
그 크기를 넘어가지 않고 1000px 안에서 자동으로 조율된다.
why? default 값으로 정해져있다
if, 풀고 싶으면 flex-wrap: wrap; 을 이용하면 변경할 수 있다.
flex-wrap: wrap-reverse는 밑에 줄이 위로 올라오고 윗줄이 아래로 간다.


*justify-content 
- 주축 방향 정렬
ex)
ㅁㅁㅁㅁ

flex-start / flex-end / center / space-between / space-around / space-evenly

flex-start /
flex-end /
center /
space-between / 부모요소의 크기에 맞게 붙여주고 아이템 사이의 공간은 일정하게
space-around / 아이템 사이에도 여백을 만들고 컨테이너 사이의 여백도 일정하게 만든다
space-evenly /

        * { margin: 0; padding: 0; box-sizing: border-box; }
        .wrap {
            width: 1000px;
            height: 150px;
            background-color: bisque;
            margin: 10px auto;
            display: flex;
            flex-direction: row; /* default 값 */
            flex-wrap: nowrap; /* default 값 */
        }
        .wrap div {
            width: 100px;
            height: 100px;
            background-color: aqua;
            border: 3px solid #333;
        }
        .wrap:nth-child(1) {
            justify-content: flex-start; 왼쪽으로
        }
        .wrap:nth-child(2) {
            justify-content: flex-end; 오른쪽으로
        }
        .wrap:nth-child(3) {
            justify-content: center; 중앙으로
        }
        .wrap:nth-child(4) {
            justify-content: space-between; 크기 안에서 일정한 배열로
        }
        .wrap:nth-child(5) {
            justify-content: space-around; 좌우에 여백을 가지고 일정한 배열로
        }   /* space-around는 크기 내 박스의 좌우 여백이 같은 것 */
        .wrap:nth-child(6) {
            justify-content: space-evenly;
        }   /* space-evenly는 크기 내에 박스 간의 여백이 같은 것 */


align-items 한줄 아이템의 교차축 정렬
flex-start / flex-end / center / stretch / baseline /
default 값은 stretch

        .wrap:nth-child(1) {
            align-items: flex-start;
        }
        .wrap:nth-child(2) {
            align-items: flex-end;
        }
        .wrap:nth-child(3) {
            align-items: center;
        }
        .wrap:nth-child(4) {
            align-items: stretch;
        }
        .wrap:nth-child(5) {
            align-items: baseline;
        }
        .wrap:nth-child(6) {
            align-items: flex-start;
        }


align-content 여러 줄의 아이템의 교차축 정렬
ex) 
ㅁㅁㅁㅁ
ㅁㅁㅁㅁ

flex-start / flex-end / center / space-between / space-around / space-evenly



        .wrap:nth-child(1) {
            align-content: flex-start;
        }
        .wrap:nth-child(2) {
            align-content: flex-end;
        }
        .wrap:nth-child(3) {
            align-content: center;
        }
        .wrap:nth-child(4) {
            align-content: space-between;
        }
        .wrap:nth-child(5) {
            align-content: space-around;
        }
        .wrap:nth-child(6) {
            align-content: space-evenly;
        }

flex-flow
   flex-flow: row wrap; /* flex-direction: row; 와 flex-wrap: wrap; 의 속기법 */

2. item에게 주는 속성
order 아이템의 배치 순서를 지정
default 값은 0

.wrap div:nth-child(2) {
            order: -1;
        }
를 사용하면 6개의 div 박스 중에서 두번째 div가 제일 앞으로 온다.








